/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -3 0 0 0 0 0];

internalField uniform 1.0;

// internalField  #codeStream  /* Use of codeStream to initialize p field */
// {
//   codeInclude  /* Headers for compilation */
//   #{
//   #include "fvCFD.H"
//   #};

//   codeOptions /* Compilation options */
//   #{
//     -I$(FOAM_SRC)/finiteVolume/lnInclude \
//     -I$(FOAM_SRC)/meshTools/lnInclude 
//   #};

//   codeLibs  /* Libraries for compilation */
//   #{
//     -lmeshTools \
//     -lfiniteVolume
//   #};

//   code  /* User code */
//   #{
//     /* Access to internal mesh information */
//     const IOdictionary& d = static_cast<const IOdictionary&>(dict);
//     const fvMesh& mesh = refCast<const fvMesh>(d.db());

//     scalarField rho(mesh.nCells(), 0.); /* initialization */

//     /* User variables initialization */
//     const scalar rho0 = 1000.0;
//     const scalar drho = 4.0;
//     const scalar H = 0.4;    // H — характерная высота


//     forAll(rho, i) /* Loop on elements */
//     {
//       const scalar y = mesh.C()[i][1]; /* Access to z component of cell centers coordinates */
//       rho[i] = drho * (1 - y / H);
//     }

//     rho.writeEntry("", os); /* Write output in the dictionary */

//   #};
// };

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform 1.0;
    }

    outlet
    {
        type            zeroGradient;
    }

    upperWall
    {
        type            zeroGradient;
    }

    lowerWall
    {
        type            zeroGradient;
    }

    frontAndBack
    {
        type            empty;
    }
}


// ************************************************************************* //
